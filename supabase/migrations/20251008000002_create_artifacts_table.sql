-- ========================================
-- AI Artifacts Table
-- Stores code artifacts (HTML, React, Three.js) generated by AI
-- ========================================

CREATE TABLE IF NOT EXISTS ai_artifacts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  description TEXT,
  code TEXT NOT NULL,
  language TEXT NOT NULL CHECK (language IN ('html', 'react', 'javascript', 'typescript')),
  artifact_type TEXT NOT NULL CHECK (artifact_type IN ('visualization', 'component', 'utility', 'dashboard', 'tool', 'other')),
  
  -- Ownership and visibility
  created_by TEXT NOT NULL, -- User ID/email
  is_global BOOLEAN DEFAULT false, -- If true, visible to all users
  
  -- Metadata
  tags TEXT[], -- Array of tags for search
  thumbnail_url TEXT, -- Optional screenshot/preview
  view_count INTEGER DEFAULT 0,
  fork_count INTEGER DEFAULT 0,
  
  -- Version control
  version INTEGER DEFAULT 1,
  parent_artifact_id UUID REFERENCES ai_artifacts(id) ON DELETE SET NULL, -- For forks
  
  -- Timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  published_at TIMESTAMP WITH TIME ZONE -- When it was made global
);

-- Indexes for performance
CREATE INDEX idx_ai_artifacts_created_by ON ai_artifacts(created_by);
CREATE INDEX idx_ai_artifacts_is_global ON ai_artifacts(is_global);
CREATE INDEX idx_ai_artifacts_language ON ai_artifacts(language);
CREATE INDEX idx_ai_artifacts_type ON ai_artifacts(artifact_type);
CREATE INDEX idx_ai_artifacts_created_at ON ai_artifacts(created_at DESC);
CREATE INDEX idx_ai_artifacts_tags ON ai_artifacts USING GIN(tags);

-- Composite index for common query
CREATE INDEX idx_ai_artifacts_visibility ON ai_artifacts(created_by, is_global);

-- Full text search on title and description
CREATE INDEX idx_ai_artifacts_search ON ai_artifacts USING GIN(
  to_tsvector('english', COALESCE(title, '') || ' ' || COALESCE(description, ''))
);

-- ========================================
-- Artifact Likes/Favorites
-- ========================================

CREATE TABLE IF NOT EXISTS ai_artifact_favorites (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  artifact_id UUID NOT NULL REFERENCES ai_artifacts(id) ON DELETE CASCADE,
  user_id TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(artifact_id, user_id)
);

CREATE INDEX idx_artifact_favorites_user ON ai_artifact_favorites(user_id);
CREATE INDEX idx_artifact_favorites_artifact ON ai_artifact_favorites(artifact_id);

-- ========================================
-- Row Level Security (RLS)
-- ========================================

ALTER TABLE ai_artifacts ENABLE ROW LEVEL SECURITY;

-- Users can view their own artifacts OR global artifacts
CREATE POLICY "Users can view own or global artifacts"
  ON ai_artifacts FOR SELECT
  USING (
    is_global = true OR 
    created_by = current_setting('app.current_user_id', true)::text OR
    true -- Allow all for now, can restrict later
  );

-- Users can create artifacts
CREATE POLICY "Users can create artifacts"
  ON ai_artifacts FOR INSERT
  WITH CHECK (true);

-- Users can update their own artifacts
CREATE POLICY "Users can update own artifacts"
  ON ai_artifacts FOR UPDATE
  USING (
    created_by = current_setting('app.current_user_id', true)::text OR
    true -- Allow all for now
  );

-- Users can delete their own artifacts
CREATE POLICY "Users can delete own artifacts"
  ON ai_artifacts FOR DELETE
  USING (
    created_by = current_setting('app.current_user_id', true)::text OR
    true -- Allow all for now
  );

-- Favorites table RLS
ALTER TABLE ai_artifact_favorites ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage their own favorites"
  ON ai_artifact_favorites FOR ALL
  USING (true)
  WITH CHECK (true);

-- ========================================
-- Functions and Triggers
-- ========================================

-- Update updated_at timestamp
CREATE TRIGGER update_ai_artifacts_updated_at
  BEFORE UPDATE ON ai_artifacts
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Function to increment view count
CREATE OR REPLACE FUNCTION increment_artifact_view_count(artifact_uuid UUID)
RETURNS void AS $$
BEGIN
  UPDATE ai_artifacts
  SET view_count = view_count + 1
  WHERE id = artifact_uuid;
END;
$$ LANGUAGE plpgsql;

-- Function to publish artifact (make it global)
CREATE OR REPLACE FUNCTION publish_artifact(artifact_uuid UUID)
RETURNS ai_artifacts AS $$
DECLARE
  result ai_artifacts;
BEGIN
  UPDATE ai_artifacts
  SET 
    is_global = true,
    published_at = NOW()
  WHERE id = artifact_uuid
  RETURNING * INTO result;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Function to unpublish artifact (make it private)
CREATE OR REPLACE FUNCTION unpublish_artifact(artifact_uuid UUID)
RETURNS ai_artifacts AS $$
DECLARE
  result ai_artifacts;
BEGIN
  UPDATE ai_artifacts
  SET 
    is_global = false,
    published_at = NULL
  WHERE id = artifact_uuid
  RETURNING * INTO result;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Function to fork artifact
CREATE OR REPLACE FUNCTION fork_artifact(
  artifact_uuid UUID,
  user_id_param TEXT,
  new_title TEXT
)
RETURNS ai_artifacts AS $$
DECLARE
  original ai_artifacts;
  forked ai_artifacts;
BEGIN
  -- Get original artifact
  SELECT * INTO original FROM ai_artifacts WHERE id = artifact_uuid;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Artifact not found';
  END IF;
  
  -- Increment fork count on original
  UPDATE ai_artifacts
  SET fork_count = fork_count + 1
  WHERE id = artifact_uuid;
  
  -- Create forked version
  INSERT INTO ai_artifacts (
    title,
    description,
    code,
    language,
    artifact_type,
    created_by,
    is_global,
    tags,
    parent_artifact_id,
    version
  ) VALUES (
    new_title,
    original.description || ' (Forked)',
    original.code,
    original.language,
    original.artifact_type,
    user_id_param,
    false, -- Forks start as private
    original.tags,
    artifact_uuid,
    1
  ) RETURNING * INTO forked;
  
  RETURN forked;
END;
$$ LANGUAGE plpgsql;

-- ========================================
-- Enable Realtime
-- ========================================
ALTER TABLE ai_artifacts REPLICA IDENTITY FULL;
ALTER TABLE ai_artifact_favorites REPLICA IDENTITY FULL;

-- ========================================
-- Comments
-- ========================================
COMMENT ON TABLE ai_artifacts IS 'Stores AI-generated code artifacts (HTML, React, Three.js, etc.)';
COMMENT ON COLUMN ai_artifacts.is_global IS 'If true, artifact is visible to all users (published)';
COMMENT ON COLUMN ai_artifacts.created_by IS 'User ID or email of creator';
COMMENT ON COLUMN ai_artifacts.parent_artifact_id IS 'ID of parent artifact if this is a fork';
COMMENT ON COLUMN ai_artifacts.tags IS 'Array of tags for categorization and search';
COMMENT ON COLUMN ai_artifacts.view_count IS 'Number of times artifact has been viewed';
COMMENT ON COLUMN ai_artifacts.fork_count IS 'Number of times artifact has been forked';

-- ========================================
-- Sample Data (Optional)
-- ========================================
INSERT INTO ai_artifacts (
  title,
  description,
  code,
  language,
  artifact_type,
  created_by,
  is_global,
  tags
) VALUES (
  'Sample Countdown Timer',
  'A simple countdown timer with start/stop controls',
  '<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Countdown Timer</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    .timer {
      text-align: center;
      background: rgba(255,255,255,0.1);
      padding: 40px;
      border-radius: 20px;
      backdrop-filter: blur(10px);
    }
    .time {
      font-size: 72px;
      font-weight: bold;
      margin: 20px 0;
    }
    button {
      padding: 12px 32px;
      font-size: 16px;
      margin: 8px;
      background: white;
      color: #667eea;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
    }
    button:hover { opacity: 0.9; }
  </style>
</head>
<body>
  <div class="timer">
    <h1>Countdown Timer</h1>
    <div class="time" id="display">10:00</div>
    <button onclick="start()">Start</button>
    <button onclick="stop()">Stop</button>
    <button onclick="reset()">Reset</button>
  </div>
  <script>
    let timeLeft = 600;
    let interval = null;
    function updateDisplay() {
      const mins = Math.floor(timeLeft / 60);
      const secs = timeLeft % 60;
      document.getElementById("display").textContent = `${mins}:${secs.toString().padStart(2, "0")}`;
    }
    function start() {
      if (interval) return;
      interval = setInterval(() => {
        if (timeLeft > 0) {
          timeLeft--;
          updateDisplay();
        } else {
          stop();
          alert("Time''s up!");
        }
      }, 1000);
    }
    function stop() {
      clearInterval(interval);
      interval = null;
    }
    function reset() {
      stop();
      timeLeft = 600;
      updateDisplay();
    }
  </script>
</body>
</html>',
  'html',
  'tool',
  'system',
  true,
  ARRAY['timer', 'countdown', 'utility', 'html']
);
