'use client';

import { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';

interface SaveArtifactButtonProps {
  code: string;
  artifactType: string;
  language?: string;
  title?: string;
  description?: string;
  conversationId?: number;
  messageId?: number;
}

export function SaveArtifactButton({
  code,
  artifactType,
  language,
  title,
  description,
  conversationId,
  messageId
}: SaveArtifactButtonProps) {
  const { user } = useAuth();
  const [isSaving, setIsSaving] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [artifactName, setArtifactName] = useState(title || `${artifactType} Artifact`);
  const [artifactDescription, setArtifactDescription] = useState(description || '');
  const [isGlobal, setIsGlobal] = useState(false);

  const handleSaveClick = () => {
    setShowModal(true);
  };

  // Map artifact language to supported types
  const getLanguageType = (): 'html' | 'react' | 'javascript' | 'typescript' => {
    const lang = (language || artifactType).toLowerCase();
    if (lang.includes('react') || lang.includes('jsx')) return 'react';
    if (lang.includes('typescript') || lang.includes('tsx')) return 'typescript';
    if (lang.includes('javascript') || lang.includes('js')) return 'javascript';
    return 'html';
  };

  // Map to artifact type categories
  const getArtifactTypeCategory = (): 'visualization' | 'component' | 'utility' | 'dashboard' | 'tool' | 'other' => {
    const type = artifactType.toLowerCase();
    if (type.includes('viz') || type.includes('chart') || type.includes('graph')) return 'visualization';
    if (type.includes('component') || type.includes('ui')) return 'component';
    if (type.includes('util') || type.includes('helper')) return 'utility';
    if (type.includes('dashboard') || type.includes('admin')) return 'dashboard';
    if (type.includes('tool')) return 'tool';
    return 'other';
  };

  const saveArtifact = async () => {
    if (!artifactName.trim()) {
      alert('Please enter a name for the artifact');
      return;
    }

    if (!user?.email) {
      alert('You must be logged in to save artifacts');
      return;
    }

    setIsSaving(true);
    
    try {
      const response = await fetch('/api/artifacts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.email,
          title: artifactName.trim(),
          description: artifactDescription.trim() || 'Generated by AI',
          code: code,
          language: getLanguageType(),
          artifact_type: getArtifactTypeCategory(),
          tags: ['ai-generated', language || artifactType, conversationId ? 'chat' : 'manual'],
          is_global: isGlobal,
        })
      });

      const data = await response.json();

      if (data.success) {
        console.log('‚úÖ Artifact saved to Supabase!', data.artifact);
        setShowModal(false);
        // Reset form
        setArtifactName(title || `${artifactType} Artifact`);
        setArtifactDescription(description || '');
        setIsGlobal(false);
        
        // Show success message
        const visibility = isGlobal ? 'Published (Company-Wide)' : 'Personal';
        alert(`‚úÖ Artifact saved to your library!\n\nTitle: ${data.artifact.title}\nVisibility: ${visibility}\nID: ${data.artifact.id}\n\nView in Artifacts library`);
      } else {
        throw new Error(data.error || 'Failed to save artifact');
      }
    } catch (error) {
      console.error('Failed to save artifact:', error);
      alert(`‚ùå Failed to save artifact\n\n${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <>
      <button
        onClick={handleSaveClick}
        disabled={isSaving}
        className="p-2 rounded-lg text-neutral-400 hover:text-white hover:bg-neutral-800/40 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        title="üíæ Save to Library"
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
        </svg>
      </button>

      {/* Save Modal */}
      {showModal && (
        <>
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-[9999]"
            onClick={() => !isSaving && setShowModal(false)}
          />
          
          {/* Modal */}
          <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-[10000] w-full max-w-md">
            <div className="bg-neutral-900 border border-neutral-700/50 rounded-xl shadow-2xl overflow-hidden">
              {/* Header */}
              <div className="px-6 py-4 border-b border-neutral-800 flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-500/10 rounded-lg">
                    <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold text-white" style={{ fontFamily: 'Tiempo, serif' }}>
                    Save Artifact
                  </h3>
                </div>
                {!isSaving && (
                  <button
                    onClick={() => setShowModal(false)}
                    className="p-1 rounded-lg text-neutral-400 hover:text-white hover:bg-neutral-800 transition-colors"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                )}
              </div>

              {/* Content */}
              <div className="px-6 py-5 space-y-4">
                {/* Artifact Type Badge */}
                <div className="flex items-center gap-2">
                  <span className="text-xs text-neutral-500" style={{ fontFamily: 'Tiempo, serif' }}>Type:</span>
                  <span className="px-2 py-1 bg-neutral-800/60 text-neutral-300 text-xs rounded font-mono">
                    {artifactType}
                  </span>
                  {language && language !== artifactType && (
                    <span className="px-2 py-1 bg-neutral-800/60 text-neutral-300 text-xs rounded font-mono">
                      {language}
                    </span>
                  )}
                </div>

                {/* Name Field */}
                <div>
                  <label className="block text-sm font-medium text-neutral-300 mb-2" style={{ fontFamily: 'Tiempo, serif' }}>
                    Name <span className="text-red-400">*</span>
                  </label>
                  <input
                    type="text"
                    value={artifactName}
                    onChange={(e) => setArtifactName(e.target.value)}
                    placeholder="My Artifact"
                    disabled={isSaving}
                    className="w-full px-3 py-2 bg-neutral-800/50 border border-neutral-700 rounded-lg text-white placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                    style={{ fontFamily: 'Tiempo, serif' }}
                    autoFocus
                  />
                </div>

                {/* Description Field */}
                <div>
                  <label className="block text-sm font-medium text-neutral-300 mb-2" style={{ fontFamily: 'Tiempo, serif' }}>
                    Description
                  </label>
                  <textarea
                    value={artifactDescription}
                    onChange={(e) => setArtifactDescription(e.target.value)}
                    placeholder="A brief description of what this artifact does..."
                    disabled={isSaving}
                    rows={3}
                    className="w-full px-3 py-2 bg-neutral-800/50 border border-neutral-700 rounded-lg text-white placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all resize-none disabled:opacity-50 disabled:cursor-not-allowed"
                    style={{ fontFamily: 'Tiempo, serif' }}
                  />
                </div>

                {/* Code Preview */}
                <div>
                  <label className="block text-sm font-medium text-neutral-300 mb-2" style={{ fontFamily: 'Tiempo, serif' }}>
                    Code Preview
                  </label>
                  <div className="bg-neutral-950 border border-neutral-800 rounded-lg p-3 max-h-32 overflow-y-auto">
                    <pre className="text-xs text-neutral-400 font-mono leading-relaxed">
                      {code.substring(0, 200)}{code.length > 200 ? '...' : ''}
                    </pre>
                  </div>
                  <p className="text-xs text-neutral-500 mt-1" style={{ fontFamily: 'Tiempo, serif' }}>
                    {code.length} characters
                  </p>
                </div>

                {/* Visibility Toggle */}
                <div className="flex items-center justify-between p-3 bg-neutral-800/30 border border-neutral-700/50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-lg ${isGlobal ? 'bg-blue-500/10' : 'bg-neutral-700/50'}`}>
                      <svg className={`w-4 h-4 ${isGlobal ? 'text-blue-400' : 'text-neutral-400'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        {isGlobal ? (
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        ) : (
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        )}
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-white" style={{ fontFamily: 'Tiempo, serif' }}>
                        {isGlobal ? 'Company-Wide' : 'Personal Only'}
                      </p>
                      <p className="text-xs text-neutral-400">
                        {isGlobal ? 'Visible to all staff members' : 'Only you can see this'}
                      </p>
                    </div>
                  </div>
                  <button
                    type="button"
                    onClick={() => setIsGlobal(!isGlobal)}
                    disabled={isSaving}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed ${
                      isGlobal ? 'bg-blue-600' : 'bg-neutral-700'
                    }`}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        isGlobal ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>
              </div>

              {/* Footer */}
              <div className="px-6 py-4 bg-neutral-950/50 border-t border-neutral-800 flex items-center justify-end gap-3">
                <button
                  onClick={() => setShowModal(false)}
                  disabled={isSaving}
                  className="px-4 py-2 text-sm text-neutral-300 hover:text-white bg-transparent hover:bg-neutral-800 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                  style={{ fontFamily: 'Tiempo, serif' }}
                >
                  Cancel
                </button>
                <button
                  onClick={saveArtifact}
                  disabled={isSaving || !artifactName.trim()}
                  className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                  style={{ fontFamily: 'Tiempo, serif' }}
                >
                  {isSaving ? (
                    <>
                      <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                      Saving...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Save Artifact
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </>
      )}
    </>
  );
}

