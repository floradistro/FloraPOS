'use client';

import { useState } from 'react';

interface SaveArtifactButtonProps {
  code: string;
  artifactType: string;
  language?: string;
  title?: string;
  description?: string;
  conversationId?: number;
  messageId?: number;
}

export function SaveArtifactButton({
  code,
  artifactType,
  language,
  title,
  description,
  conversationId,
  messageId
}: SaveArtifactButtonProps) {
  const [isSaving, setIsSaving] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [artifactName, setArtifactName] = useState(title || `${artifactType} Artifact`);
  const [artifactDescription, setArtifactDescription] = useState(description || '');

  const handleSaveClick = () => {
    setShowModal(true);
  };

  const saveArtifact = async () => {
    if (!artifactName.trim()) {
      alert('Please enter a name for the artifact');
      return;
    }

    setIsSaving(true);
    
    try {
      const response = await fetch('http://localhost:8081/wp-json/flora-im/v1/artifacts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: 1, // TODO: Get from auth context
          title: artifactName.trim(),
          description: artifactDescription.trim() || 'Generated by Claude AI',
          artifact_type: artifactType,
          language: language || artifactType,
          code_content: code,
          conversation_id: conversationId,
          message_id: messageId,
          status: 'draft'
        })
      });

      const data = await response.json();

      if (data.success) {
        // Show success notification
        console.log('‚úÖ Artifact saved!', data.artifact);
        setShowModal(false);
        // Reset form
        setArtifactName(title || `${artifactType} Artifact`);
        setArtifactDescription(description || '');
        
        // Show success message
        alert(`‚úÖ Artifact saved to library!\n\nTitle: ${data.artifact.title}\nID: ${data.artifact.id}\n\nView in Artifacts dropdown or WordPress admin`);
      } else {
        throw new Error(data.error || 'Failed to save artifact');
      }
    } catch (error) {
      console.error('Failed to save artifact:', error);
      alert(`‚ùå Failed to save artifact\n\n${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <>
      <button
        onClick={handleSaveClick}
        disabled={isSaving}
        className="p-2 rounded-lg text-neutral-400 hover:text-white hover:bg-neutral-800/40 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        title="üíæ Save to Library"
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
        </svg>
      </button>

      {/* Save Modal */}
      {showModal && (
        <>
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-[9999]"
            onClick={() => !isSaving && setShowModal(false)}
          />
          
          {/* Modal */}
          <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-[10000] w-full max-w-md">
            <div className="bg-neutral-900 border border-neutral-700/50 rounded-xl shadow-2xl overflow-hidden">
              {/* Header */}
              <div className="px-6 py-4 border-b border-neutral-800 flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-500/10 rounded-lg">
                    <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold text-white" style={{ fontFamily: 'Tiempo, serif' }}>
                    Save Artifact
                  </h3>
                </div>
                {!isSaving && (
                  <button
                    onClick={() => setShowModal(false)}
                    className="p-1 rounded-lg text-neutral-400 hover:text-white hover:bg-neutral-800 transition-colors"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                )}
              </div>

              {/* Content */}
              <div className="px-6 py-5 space-y-4">
                {/* Artifact Type Badge */}
                <div className="flex items-center gap-2">
                  <span className="text-xs text-neutral-500" style={{ fontFamily: 'Tiempo, serif' }}>Type:</span>
                  <span className="px-2 py-1 bg-neutral-800/60 text-neutral-300 text-xs rounded font-mono">
                    {artifactType}
                  </span>
                  {language && language !== artifactType && (
                    <span className="px-2 py-1 bg-neutral-800/60 text-neutral-300 text-xs rounded font-mono">
                      {language}
                    </span>
                  )}
                </div>

                {/* Name Field */}
                <div>
                  <label className="block text-sm font-medium text-neutral-300 mb-2" style={{ fontFamily: 'Tiempo, serif' }}>
                    Name <span className="text-red-400">*</span>
                  </label>
                  <input
                    type="text"
                    value={artifactName}
                    onChange={(e) => setArtifactName(e.target.value)}
                    placeholder="My Artifact"
                    disabled={isSaving}
                    className="w-full px-3 py-2 bg-neutral-800/50 border border-neutral-700 rounded-lg text-white placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                    style={{ fontFamily: 'Tiempo, serif' }}
                    autoFocus
                  />
                </div>

                {/* Description Field */}
                <div>
                  <label className="block text-sm font-medium text-neutral-300 mb-2" style={{ fontFamily: 'Tiempo, serif' }}>
                    Description
                  </label>
                  <textarea
                    value={artifactDescription}
                    onChange={(e) => setArtifactDescription(e.target.value)}
                    placeholder="A brief description of what this artifact does..."
                    disabled={isSaving}
                    rows={3}
                    className="w-full px-3 py-2 bg-neutral-800/50 border border-neutral-700 rounded-lg text-white placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all resize-none disabled:opacity-50 disabled:cursor-not-allowed"
                    style={{ fontFamily: 'Tiempo, serif' }}
                  />
                </div>

                {/* Code Preview */}
                <div>
                  <label className="block text-sm font-medium text-neutral-300 mb-2" style={{ fontFamily: 'Tiempo, serif' }}>
                    Code Preview
                  </label>
                  <div className="bg-neutral-950 border border-neutral-800 rounded-lg p-3 max-h-32 overflow-y-auto">
                    <pre className="text-xs text-neutral-400 font-mono leading-relaxed">
                      {code.substring(0, 200)}{code.length > 200 ? '...' : ''}
                    </pre>
                  </div>
                  <p className="text-xs text-neutral-500 mt-1" style={{ fontFamily: 'Tiempo, serif' }}>
                    {code.length} characters
                  </p>
                </div>
              </div>

              {/* Footer */}
              <div className="px-6 py-4 bg-neutral-950/50 border-t border-neutral-800 flex items-center justify-end gap-3">
                <button
                  onClick={() => setShowModal(false)}
                  disabled={isSaving}
                  className="px-4 py-2 text-sm text-neutral-300 hover:text-white bg-transparent hover:bg-neutral-800 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                  style={{ fontFamily: 'Tiempo, serif' }}
                >
                  Cancel
                </button>
                <button
                  onClick={saveArtifact}
                  disabled={isSaving || !artifactName.trim()}
                  className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                  style={{ fontFamily: 'Tiempo, serif' }}
                >
                  {isSaving ? (
                    <>
                      <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                      Saving...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Save Artifact
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </>
      )}
    </>
  );
}

